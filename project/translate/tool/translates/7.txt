说明如果使用独占不透明整数资源的pod以阻止solate启动程序释放分配的核心的方式崩溃，那么尽管oir可用，下一个隔离任务可能无法安全地进行分配。
这可能有很多原因，其中最有可能的原因是：子进程在接收到术语信号（kubelet跟踪kill）或从内核oom（内存不足）killer接收kill后，未能在允许的宽限期内终止。
在这种情况下，隔离必须以非零退出状态崩溃。
这在操作员看来是一个失败的吊舱发射，调度器将尝试重新安排吊舱。
这种情况将在该节点上持续到reconcile运行，此时它将观察到容器的pid无效，并通过更新任务文件释放核心以供重用这在实践中应该非常罕见，但它与上述场景相关。
如果cmk子命令的pid如上所述泄漏，并在reconcile运行之前被内核回收，那么当reconcile运行时，它将看到pid引用正在运行的进程，并且不会从任务文件中删除该pid。
